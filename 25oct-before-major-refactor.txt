//V37 de la versiunea DEV

//IMPROVEMENTS/TODO:
//- for better execution time use static bgcolor values
//- remove disposable variables
//- avoid concatenating strings
//- improve UI code / tables with functions / lighter approaches
//- fix bugs when BO/SL/TP are on the same candle

//@author zendog123
//@version=4
strategy(title="Zendog V2 backtest DCA bot 3commas", shorttitle="Zendog V2 DCA", overlay=true,
   max_labels_count=500, pyramiding=99, initial_capital=10000, calc_on_order_fills=false,
     commission_type=strategy.commission.percent, commission_value=0.075)

//used for labels
cfg_theme           = input(defval="dark", title="Chart theme",
                             options=["light", "dark"])
theme_text_color    = cfg_theme == "dark" ? color.white : color.black

f_print(_text) =>
    // Create label on the first bar.
    var _label = label.new(x=bar_index, y=na, text=tostring(_text), xloc=xloc.bar_index, yloc=yloc.price, color=color.blue,
       style=label.style_label_up, textcolor=theme_text_color, size=size.normal, textalign=text.align_left)
    // On next bars, update the label's x and y position, and the text it displays.
    if barstate.islastconfirmedhistory
        label.set_xy(_label, bar_index, low*0.99)
        label.set_text(_label, tostring(_text))



//----------------------------------------------
//STRATEGY STUFF STARTS HERE


//deal start
deal_start_condition        = false
deal_start_type             = input(defval="RSI-7", title="Deal start trigger",
                             options=["RSI-7", "External Indicator"], group="Deal start condition")

string rsi_start_operation  = input(defval="<=", title="RSI-7", type=input.string, group="Deal start condition",
                             options=["<=", ">="])
rsi_start_value             = input(type=input.integer, defval=30, title="RSI-7 Value", group="Deal start condition")

float deal_start_source     = input(defval=close, title="Start Indicator Source And Value", type=input.source, group="Deal start condition")
string deal_start_operation = input(defval="=", title="", type=input.string, group="Deal start condition",
                             options=["<=", "=", ">="])
float deal_start_value      = input(defval=-99999, title="", type=input.float, group="Deal start condition")


//deal stop
deal_stop_condition        = false
deal_stop_type             = input(defval="Take profit", title="Deal stop trigger",
                             options=["Take profit", "External Indicator"],
                              group="Deal stop condition")

float deal_stop_source     = input(defval=close, title="Stop Indicator Source And Value", type=input.source, group="Deal stop condition")
string deal_stop_operation = input(defval="=", title="", type=input.string, group="Deal stop condition",
                             options=["<=", "=", ">="])
float deal_stop_value      = input(defval=-99999, title="", type=input.float, group="Deal stop condition")


//--------- DEAL START CONDITION ----------
//RSI-7
if (deal_start_type == "RSI-7") and (rsi_start_operation == "<=")
    deal_start_condition := (rsi(close, 7) <= rsi_start_value)
else if (deal_start_type == "RSI-7") and (rsi_start_operation == ">=")
    deal_start_condition := (rsi(close, 7) >= rsi_start_value)

//MAYBE FOUND A BUG --> Leave all if's on this level otherwise they do not work
else if ((deal_start_type == "External Indicator") and (deal_start_value != -99999)
  and (deal_start_operation == "=") and (deal_start_source == deal_start_value))
    deal_start_condition := true
else if ((deal_start_type == "External Indicator") and (deal_start_value != -99999)
  and (deal_start_operation == "<=") and (deal_start_source <= deal_start_value))
    deal_start_condition := true
else if ((deal_start_type == "External Indicator") and (deal_start_value != -99999)
  and (deal_start_operation == ">=") and (deal_start_source >= deal_start_value))
    deal_start_condition := true
else
    deal_start_condition := false
//-----------------------------------------



//--------- DEAL STOP CONDITION -----------
if ((deal_stop_type == "External Indicator") and (deal_stop_value != -99999)
  and (deal_stop_operation == "=") and (deal_stop_source == deal_stop_value))
    deal_stop_condition := true
else if ((deal_stop_type == "External Indicator") and (deal_stop_value != -99999)
  and (deal_stop_operation == "<=") and (deal_stop_source <= deal_stop_value))
    deal_stop_condition := true
else if ((deal_stop_type == "External Indicator") and (deal_stop_value != -99999)
  and (deal_stop_operation == ">=") and (deal_stop_source >= deal_stop_value))
    deal_stop_condition := true
else
    deal_stop_condition := false
//-----------------------------------------



//strategy timeframe limitation (run just between specific dates)
limit_date_range = input(title="Limit Date Range", type=input.bool, defval=true, group="Backtest date range")

//Input options that configure backtest date range
start_time = input(defval = timestamp("01 Aug 2021 00:00 +0000"), title = "Start Time",
  type = input.time, group="Backtest date range")
end_time = input(defval = timestamp("31 Dec 2021 00:00 +0000"), title = "End Time",
  type = input.time, group="Backtest date range")

in_date_range = true
if limit_date_range
    in_date_range := time >= start_time and time <= end_time
else
    in_date_range := true



cfg_strategy_type                           = input(title="Strategy Type", defval="long", options=["long", "short"], group="Strategy settings")
var bool IS_LONG                            = cfg_strategy_type == "long"

float cfg_base_order_size_usd               = input(title="Base order size", type=input.float, defval=1000, step=1000, group="Strategy settings")
float cfg_safety_order_size_usd             = input(title="Safety order size", type=input.float, defval=700, step=100, group="Strategy settings")

cfg_take_profit_type                        = input(title="Take Profit Type", defval="% From total volume",
                                                 options=["% From base order", "% From total volume"],
                                                  group="Strategy settings")
float cfg_take_profit_perc                  = input(title="Take Profit (%)", type=input.float, minval=0.0, step=0.1, defval=2, group="Strategy settings")


bool cfg_enable_stop_loss                   = input(title="Enable Stop Loss", type=input.bool, defval=false, group="Strategy settings")
float cfg_stop_loss_perc                    = input(title="Stop Loss (%)", type=input.float, minval=0.0, step=0.1, defval=20, group="Strategy settings")
float cfg_max_safety_orders                 = input(title="Max Safety Trades Count", type=input.float, defval=5, group="Strategy settings")
float cfg_safety_order_price_deviation_perc = input(title="Price Deviation To Open Safety Trades (%)", type=input.float, minval=0.0,
                                                  step=0.1, defval=3, group="Strategy settings")
float cfg_safety_order_volume_scale         = input(title="Safety Order Volume Scale", type=input.float, defval=1, step=0.1, group="Strategy settings")
float cfg_safety_order_price_step_scale     = input(title="Safety Order Step Scale", type=input.float, defval=1, step=0.1, group="Strategy settings")

int cfg_planb_timeout                       = input(title="PLAN-B Timeout", type=input.integer, defval=1, step=1, group="PLAN-B",
                                                 tooltip="Timeout to activate PLAN-B. Use 'none' in the dropdown below to disable PLAN-B")
cfg_planb_timeout_type                      = input(title="", defval="none", options=["none", "min", "hour", "day"], group="PLAN-B")
cfg_planb_action                            = input(title="PLAN-B Action", defval="none", options=["none", "paint only", "close deal"], group="PLAN-B")
float cfg_planb_take_profit                 = input(title="PLAN-B Close Deal (%) ", type=input.float, defval=0.5, step=0.1, group="PLAN-B",
                                                 tooltip="Alternative % from total volume (versus position_avg_size) to use when PLAN-B is activated.\nIt is either a positive % for alternative TP or a negative % for alternative SL")

get_planb_timeout()=>
    float _timeout = 0
    if cfg_planb_timeout_type == "day"
        _timeout := cfg_planb_timeout * 86400000
    else if cfg_planb_timeout_type == "hour"
        _timeout := cfg_planb_timeout * 3600000
    else if cfg_planb_timeout_type == "min"
        _timeout := cfg_planb_timeout * 60000

//calculate only once
var float glb_planb_timeout     = get_planb_timeout()

string _tooltip_bot_control     = "If this is enabled the strategy can control some bot operations via Webhook calls.\nThe strategy will control deal start and deal stop from any reason (take profit, stop loss or timeout), executed at market price.\nIt is unable to control any Safety Orders, but they can and should be replicated by the settings of the 3commas bot.\n\nTo enable Webhook calls, check this option, complete Bot id and Email Token. After the strategy is configured, create an alert on the strategy, select Order fills only, and in the message field simply input {{strategy.order.alert_message}}."
bool cfg_enable_bot_control     = input(title="Enable Bot Control Via Webhook", type=input.bool, defval=false, group="3commas Bot Settings",
                                     tooltip=_tooltip_bot_control)
string cfg_bot_id               = input(title="Bot id", type=input.string, defval="", group="3commas Bot Settings")
string cfg_email_token          = input(title="Email token", type=input.string, defval="", group="3commas Bot Settings")
bool cfg_exec_deal_start        = input(title="Deal start", type=input.bool, defval=true, group="3commas Bot Settings")
bool cfg_exec_take_profit       = input(title="Take profit", type=input.bool, defval=true, group="3commas Bot Settings")
bool cfg_exec_stop_loss         = input(title="Stop Loss", type=input.bool, defval=true, group="3commas Bot Settings")
bool cfg_exec_planb_timeout     = input(title="PLAN-B", type=input.bool, defval=true, group="3commas Bot Settings")


float cfg_commision_percent = input(title="Commision (%)", type=input.float, minval=0.0, step=0.001, defval=0.075, group="Broker")

//visuals
int cfg_decimals            = input(title="Decimals For Display", type=input.integer, defval=2, group="Visuals")

bool cfg_show_pnl_labels    = input(title="Show PnL Labels", type=input.bool, defval=true, group="Visuals")
bool cfg_show_stats_table   = input(title="Show Table With Statistics", type=input.bool, defval=true, group="Visuals")
bool cfg_show_settings_table= input(title="Show Table With Strategy Settings", type=input.bool, defval=true, group="Visuals")
bool cfg_show_step_table    = input(title="Show Table With Steps Similar To 3commas", type=input.bool, defval=false, group="Visuals",
                                 tooltip="Make sure the Table with Strategy Settings is disabled")
float cfg_steps_bo_price    = input(title="BO Entry Price For Steps Table", type=input.float, defval=0, group="Visuals")


//how many safety orders were placed in current trade
var int count_placed_safety_orders = 0

//how many safety orders were executed in current trade
var int count_executed_safety_orders = 0

var float glb_take_profit_price         = na
var float glb_planb_timeout_price       = na
var float glb_stop_loss_price           = na
var float glb_base_order_price          = na
var float glb_base_order_qty            = na
var float glb_next_safety_order_price   = na
var float glb_next_safety_order_qty     = na

//calculated based on BO size, SO size, and steps
var float glb_required_capital          = na

//used for stats and to calculate commision
var float glb_total_volume              = 0

//we use these variables to remember position size and use it
//to calculate pnl after the deal was closed
var float glb_current_deal_position_size        = na
var float glb_current_deal_avg_price            = na

//used to try to obtain real prices for orders already executed
var float glb_current_deal_prev_position_size   = na
var float glb_strategy_prev_netprofit           = 0

//These remain global because of execution improvement
var float glb_current_deal_close_value      = 0
var float glb_current_deal_pnl              = 0



//0 - not in deal
//1 - base order executed
//2 - safety order executed
var int last_performed_action = 0

//array that holds stats for used SO
var int[] statsarray_safety_orders          = array.new_int(0)
var int[] statsarray_safety_orders_timeout  = array.new_int(0)

var int glb_dealstart_bar_index     = 0
var int[] statsarray_no_of_bars     = array.new_int(0)

var int glb_dealstart_bar_time          = 0
var float[] statsarray_no_of_days       = array.new_float(0)
var float stats_max_days_in_deal        = 0
var stats_max_days_in_deal_start_time   = 0
var stats_max_days_in_deal_close_time   = 0

var bool firstdeal_started      = false
var int  firstdeal_bar_index    = 0
var float firstdeal_start_price = 0
var firstdeal_start_time        = 0

var int lastdeal_close_bar_index    = 0
var lastdeal_close_time             = 0

//buy and hold stats
var float bh_start_price            = 0
var bh_start_time                   = 0
var float bh_end_price              = 0
var bh_end_time                     = 0
var bool bh_calculation_started     = false

//max drawndown in a deal vs avg position price
var float stats_max_drawdown                = 0
var stats_max_drawdown_time                 = 0
var float stats_max_drawdown_equity_percent = 0

//biggest percent deviation vs base order
var float stats_biggest_dev                 = 0
var stats_biggest_dev_time                  = 0

var float stats_deals_started                       = 0
var float stats_deals_finished                      = 0
var float stats_deals_stop_loss_finished            = 0
var float stats_deals_take_profit_finished          = 0
var float stats_deals_timeout_finished  = 0

//will keep profit / losses
var float[] statsarray_winning_deals_pnl    = array.new_float(0)
var float[] statsarray_losing_deals_pnl     = array.new_float(0)
var float[] statsarray_timeout_deals_pnl    = array.new_float(0)

//FUNCTIONS

//so_index 0 is for BO, from 1..n on it is for SOn
//calculates percent so no adjustment for long vs short
stepped_deviation(so_index)=>
    float _stepped_deviation = 0
    if so_index > 0
        for _i = 1 to so_index
            _stepped_deviation += cfg_safety_order_price_deviation_perc * pow(cfg_safety_order_price_step_scale, _i - 1)
    else
        _stepped_deviation := 0


valid_stop_loss()=>
    bool _valid = false
    if cfg_enable_stop_loss
        //stop loss percent is bigger than last safety order percent
        if cfg_stop_loss_perc > stepped_deviation(cfg_max_safety_orders)
            _valid := true
        else
            _valid := false
    else
        _valid := false


next_so_price(so_index, _bo_price)=>
    float _stepped_deviation = stepped_deviation(so_index)
    if IS_LONG
        float _next_so_price = _bo_price * (1 - (_stepped_deviation / 100))
    else
        float _next_so_price = _bo_price * (1 + (_stepped_deviation / 100))


next_so_size_usd(so_index)=>
    float _next_so_size_usd = cfg_safety_order_size_usd * pow(cfg_safety_order_volume_scale, so_index - 1)


next_so_qty(so_index, _bo_price)=>
    float _next_so_size_usd = next_so_size_usd(so_index)
    float _next_so_qty = _next_so_size_usd / next_so_price(so_index, _bo_price)


is_planb_timeout()=>
    _res = false
    if na(glb_dealstart_bar_time) == false
        if (time - glb_dealstart_bar_time) >= glb_planb_timeout
            _res := true
    else
        _res := false


get_required_capital()=>
    float _total_buy = 0
    if cfg_max_safety_orders > 0
        _total_buy += cfg_base_order_size_usd
        for _i=1 to cfg_max_safety_orders
            _total_buy += next_so_size_usd(_i)
    else
        _total_buy += cfg_base_order_size_usd


get_days(start_time, end_time)=>
    time_diff = end_time - start_time
    diff_days = round(time_diff / 86400000, 1)


get_timestring_from_seconds(seconds)=>
    if seconds >= 86400
        string _string = tostring(round(seconds / 86400, 1)) + " days"
    else if seconds >= 3600
        string _string = tostring(round(seconds / 3600, 1)) + " hours"
    else
        string _string = tostring(round(seconds / 60, 1)) + " mins"


get_timestring_from_days(days)=>
    get_timestring_from_seconds(days * 86400)


get_timespan_string(start_time, end_time)=>
    _seconds_diff = (end_time - start_time)/1000
    get_timestring_from_seconds(_seconds_diff)


//f_print(get_timestring_from_days(0.5) +"\n"+ get_timestring_from_days(0.01) +"\n"+ get_timestring_from_days(0.7))

get_commission_for_volume(vol)=>
    _commision = vol * cfg_commision_percent / 100


get_final_pnl_new()=>
    float _pnl = 0
    if array.size(statsarray_losing_deals_pnl) > 0
        _pnl += array.sum(statsarray_losing_deals_pnl)

    if array.size(statsarray_winning_deals_pnl) > 0
        _pnl += array.sum(statsarray_winning_deals_pnl)

    //add or substract current deal openprofit
    //commission is already substracted
    _pnl := _pnl + strategy.openprofit


get_final_pnl_prct_new()=>
    get_final_pnl_new() * 100 / glb_required_capital


take_profit_price()=>
    if cfg_take_profit_type == "% From total volume"
        if IS_LONG
            _tp_price = strategy.position_avg_price * (1 + cfg_take_profit_perc/100)
        else
            _tp_price = strategy.position_avg_price * (1 - cfg_take_profit_perc/100)
    else if cfg_take_profit_type == "% From base order"
        if IS_LONG
            _tp_size_usd = cfg_base_order_size_usd * cfg_take_profit_perc / 100
            _tp_price =  ((strategy.position_avg_price * strategy.position_size) + _tp_size_usd) / strategy.position_size
        else
            _tp_size_usd = cfg_base_order_size_usd * cfg_take_profit_perc / 100
            _tp_price =  ((strategy.position_avg_price * strategy.position_size) - _tp_size_usd) / strategy.position_size


planb_timeout_price()=>
    if IS_LONG
        _price = strategy.position_avg_price * (1 + float(cfg_planb_take_profit)/100)
    else
        _price = strategy.position_avg_price * (1 - float(cfg_planb_take_profit)/100)


stop_loss_price()=>
    if IS_LONG
        glb_base_order_price * (1 - cfg_stop_loss_perc/100)
    else
        glb_base_order_price * (1 + cfg_stop_loss_perc/100)


is_condition_take_profit()=>
    if IS_LONG
        (high >= glb_take_profit_price) and (strategy.position_size == 0)
    else
        (low <= glb_take_profit_price) and (strategy.position_size == 0)


is_condition_planb_price()=>
    if IS_LONG
        (high >= glb_planb_timeout_price) and (strategy.position_size == 0)
    else
        (low <= glb_planb_timeout_price) and (strategy.position_size == 0)


is_condition_stop_loss()=>
    bool _cond = false

    if valid_stop_loss()
        if IS_LONG
            _cond := (low <= glb_stop_loss_price) and (strategy.position_size == 0)
        else
            _cond := (high >= glb_stop_loss_price) and (strategy.position_size == 0)
    else
        _cond := false


get_current_dev_vs_bo_price()=>
    if IS_LONG
        _dev = (low * 100 / glb_base_order_price) - 100
    else
        _dev = 100 - (high * 100 / glb_base_order_price)


get_current_drawdown_equity()=>
    _deal_total_value               = strategy.position_size * strategy.position_avg_price
    if IS_LONG
        _drawdown_actual_value      = strategy.position_size * low
        _drawdown_equity_percent    = (_drawdown_actual_value * 100 / _deal_total_value) - 100
    else
        _drawdown_actual_value      = strategy.position_size * high
        _drawdown_equity_percent    = 100 - (_drawdown_actual_value * 100 / _deal_total_value)


is_deal_started()=>
    _flag = false
    if IS_LONG and strategy.position_size > 0
        _flag := true
    else if not IS_LONG and strategy.position_size < 0
        _flag := true
    else
        _flag := false


//init array with 0 values
init_stats_array_safety_orders()=>
    for _i =0 to cfg_max_safety_orders
        array.push(statsarray_safety_orders, 0)
        array.push(statsarray_safety_orders_timeout, 0)


get_bot_startdeal_json()=>
    _string = "{\"message_type\":\"bot\", \"bot_id\":\""+cfg_bot_id+"\", \"email_token\":\""+cfg_email_token+"\", \"delay_seconds\":0, \"pair\":\""+tostring(syminfo.currency)+"_"+tostring(syminfo.basecurrency)+"\"}"


get_bot_stopdeal_json()=>
    _string = "{\"action\": \"close_at_market_price_all\", \"message_type\":\"bot\", \"bot_id\":\""+cfg_bot_id+"\", \"email_token\":\""+cfg_email_token+"\", \"delay_seconds\":0, \"pair\":\""+tostring(syminfo.currency)+"_"+tostring(syminfo.basecurrency)+"\"}"


get_month_string(month_number)=>
    if month_number == 1
        _string = "Jan"
    else if month_number == 2
        _string = "Feb"
    else if month_number == 3
        _string = "Mar"
    else if month_number == 4
        _string = "Apr"
    else if month_number == 5
        _string = "May"
    else if month_number == 6
        _string = "Jun"
    else if month_number == 7
        _string = "Jul"
    else if month_number == 8
        _string = "Aug"
    else if month_number == 9
        _string = "Sep"
    else if month_number == 10
        _string = "Oct"
    else if month_number == 11
        _string = "Nov"
    else if month_number == 12
        _string = "Dec"


time_to_date_string(timeinms)=>
    if timeinms > 0
        _string = tostring(dayofmonth(timeinms), "00/") + get_month_string(month(timeinms)) +"/"+ tostring(year(timeinms), "0000") +
          " " + tostring(hour(timeinms), "00:") + tostring(minute(timeinms), "00:") + tostring(second(timeinms), "00")
    else
        _string = ""

get_bg_color_grey(row)=>
    _bgcolor = (row % 2 == 0) ? #CACACA : #E5E5E5

get_bg_color_blue()=>
    _bgcolor = #006bb3

get_bg_color_green()=>
    _bgcolor = #A6E59B

get_bg_color_red()=>
    _bgcolor = #E59B9B

get_bg_color_lightblue()=>
    _bgcolor = #00BFFF

get_bg_color_orange()=>
    _bgcolor = #FFA500



//stats for buy and hold return
if (in_date_range and bh_calculation_started == false)
    bh_start_price          := open
    bh_start_time           := time
    bh_calculation_started  := true
    bh_end_price            := close
    bh_end_time             := time_close


//update stats for buy and hold as long as we're still inside date range
if (in_date_range)
    bh_end_price            := close
    bh_end_time             := time_close



//buy condition for base order
if (in_date_range and deal_start_condition and last_performed_action == 0)

    //stats for the first deal
    if firstdeal_started == false
        firstdeal_started       := true
        firstdeal_bar_index     := bar_index
        firstdeal_start_price   := close
        firstdeal_start_time    := time
        init_stats_array_safety_orders()

    stats_deals_started         := stats_deals_started + 1
    glb_dealstart_bar_index     := bar_index
    glb_dealstart_bar_time      := time

    //how many coins
    glb_base_order_qty          := cfg_base_order_size_usd / close

    //This value will be overwritten with the actual market price
    glb_base_order_price        := close

    if valid_stop_loss()
        glb_stop_loss_price     := stop_loss_price()

    //enter with market order
    //if using limit order and open of next candle is different than close of current candle
    //the deal might not start


    _alert_human = "D"+tostring(stats_deals_started)+"-BO ("+
     tostring(syminfo.basecurrency)+"-"+tostring(syminfo.currency)+
      (cfg_strategy_type=="long"?" LONG":" SHORT") + ") | " +
       tostring(glb_base_order_qty*glb_base_order_price)+" "+tostring(syminfo.currency)


    if cfg_enable_bot_control and cfg_exec_deal_start
        _alert_json = get_bot_startdeal_json()
        strategy.entry(id="D"+tostring(stats_deals_started)+"-BO", long=IS_LONG, qty=glb_base_order_qty, alert_message=_alert_json)
        alert(_alert_human, alert.freq_once_per_bar_close)
    else
        strategy.entry(id="D"+tostring(stats_deals_started)+"-BO", long=IS_LONG, qty=glb_base_order_qty, alert_message=_alert_human)
        alert(_alert_human, alert.freq_once_per_bar_close)
    last_performed_action   := 1


//if we are in a deal
if is_deal_started()
    glb_take_profit_price       := take_profit_price()

    if is_planb_timeout() and cfg_planb_action != "none"
        glb_planb_timeout_price := planb_timeout_price()


    //calculate SL as well
    if valid_stop_loss()
        glb_stop_loss_price     := stop_loss_price()

    //save these variables for pushing stats after the deal is finished
    glb_current_deal_position_size  := strategy.position_size
    glb_current_deal_avg_price      := strategy.position_avg_price

    //stats for max drawndown
    if strategy.openprofit < stats_max_drawdown
        stats_max_drawdown                  := strategy.openprofit
        stats_max_drawdown_equity_percent   := get_current_drawdown_equity()
        //approx
        stats_max_drawdown_time := time_close


    //biggest drop vs base order price
    _current_dev_vs_bo_price = get_current_dev_vs_bo_price()
    if _current_dev_vs_bo_price < stats_biggest_dev
        stats_biggest_dev       := _current_dev_vs_bo_price
        //approx
        stats_biggest_dev_time  := time_close


    //place the first safety order (SO)
    if (strategy.opentrades == 1) and (last_performed_action == 1) and (cfg_max_safety_orders > 0)

        // label.new(bar_index, low-(low*8/100), text="PBO:"+tostring(strategy.position_size)+"@"+tostring(strategy.position_avg_price),
        //  yloc=yloc.price, size=size.small, style=label.style_none, textcolor=theme_text_color)

        //get the real volume and price for executed BO
        glb_current_deal_prev_position_size := strategy.position_size
        glb_base_order_price                := strategy.position_avg_price
        glb_total_volume                    += strategy.position_size * strategy.position_avg_price

        count_placed_safety_orders      := count_placed_safety_orders + 1
        glb_next_safety_order_price     := next_so_price(count_placed_safety_orders, glb_base_order_price)
        glb_next_safety_order_qty       := next_so_qty(count_placed_safety_orders, glb_base_order_price)

        //place safety order as limit order

        // ----------------------------
        // I guess there is no reason to send human readeable alerts to the bot, so this section
        // is refactored. Feel free to re-use this if your are interested in sending notifications at
        // the same time the strategy order triggers (otherwise notifications are delayed until the next candle)
        // ----------------------------

        // _alert = "D"+tostring(stats_deals_started)+"-SO"+tostring(count_placed_safety_orders)+" ("+
        //  tostring(syminfo.basecurrency)+"_"+tostring(syminfo.currency)+
        //   (cfg_strategy_type=="long"?" LONG":" SHORT") + ") | "+
        //   tostring(glb_next_safety_order_qty*glb_next_safety_order_price)+" "+tostring(syminfo.currency)
        // strategy.entry(id="D"+tostring(stats_deals_started)+"-SO" + tostring(count_placed_safety_orders),
        //   long=IS_LONG, qty=glb_next_safety_order_qty, limit=glb_next_safety_order_price, alert_message=_alert)

        strategy.entry(id="D"+tostring(stats_deals_started)+"-SO" + tostring(count_placed_safety_orders),
          long=IS_LONG, qty=glb_next_safety_order_qty, limit=glb_next_safety_order_price)

        //mark that a safety order was placed
        last_performed_action := 2

        //debug labels
        // label.new(bar_index, low-(low*7/100), text="BO\n"+
        //   tostring(strategy.position_size)+"@"+tostring(strategy.position_avg_price),
        //   yloc=yloc.price, size=size.small, style=label.style_none, textcolor=theme_text_color)
        // label.new(bar_index, low-(low*10/100), text="SO"+tostring(count_placed_safety_orders)+"\n"+
        //   tostring(glb_next_safety_order_qty)+"\n"+tostring(glb_next_safety_order_price),
        //      yloc=yloc.price, size=size.small, style=label.style_none, textcolor=theme_text_color)
        // label.new(bar_index, low-(low*7/100), text="AVG\n"+tostring(strategy.position_avg_price),
        //   yloc=yloc.price, size=size.small, style=label.style_none, textcolor=theme_text_color)
        // label.new(bar_index, low-(low*8/100), text="OT\n"+tostring(strategy.opentrades),
        //   yloc=yloc.price, size=size.small, style=label.style_none, textcolor=theme_text_color)
        // label.new(bar_index, low-(low*7/100), text="PS\n"+tostring(strategy.position_size),
        //   yloc=yloc.price, size=size.small, style=label.style_none, textcolor=theme_text_color)
        // label.new(bar_index, low-(low*10/100), text="CNT\n"+tostring(count_placed_safety_orders),
        //   yloc=yloc.price, size=size.small, style=label.style_none, textcolor=theme_text_color)

    //if there are 0 safety orders configured save values for statistics
    else if (strategy.opentrades == 1) and (last_performed_action == 1) and (cfg_max_safety_orders == 0)

        //get the BO actual executed volume and price and mark
        //last performed action to avoid further execution of this code
        last_performed_action               := 2
        glb_current_deal_prev_position_size := strategy.position_size
        glb_base_order_price                := strategy.position_avg_price
        glb_total_volume                    += strategy.position_size*strategy.position_avg_price


    //after each SO is filled we place next SO order
    if (strategy.opentrades > count_placed_safety_orders) and (last_performed_action == 2)
       and (count_placed_safety_orders < cfg_max_safety_orders)

        // label.new(bar_index, low-(low*8/100), text="TP@"+tostring(glb_take_profit_price),
        //   yloc=yloc.price, size=size.small, style=label.style_none, textcolor=theme_text_color)

        // label.new(bar_index, low-(low*8/100),
        //   text="PSO"+tostring(count_placed_safety_orders)+": "+
        //   tostring(strategy.position_size - glb_current_deal_prev_position_size)+"@"+tostring(glb_next_safety_order_price),
        //      yloc=yloc.price, size=size.small, style=label.style_none, textcolor=theme_text_color)


        //delayed alert on the next candle, about previous SO execution
        _alert_human = "D"+tostring(stats_deals_started)+"-SO"+tostring(count_placed_safety_orders)+" [delayed] ("+
         tostring(syminfo.basecurrency)+"_"+tostring(syminfo.currency)+
          (cfg_strategy_type=="long"?" LONG":" SHORT") + ") | "+
           tostring(glb_next_safety_order_qty*glb_next_safety_order_price)+" "+tostring(syminfo.currency)
        alert(_alert_human, alert.freq_once_per_bar_close)

        count_executed_safety_orders    := count_executed_safety_orders + 1
        count_placed_safety_orders      := count_placed_safety_orders + 1

        //calculate from previous executed safety order
        glb_total_volume        += (strategy.position_size - glb_current_deal_prev_position_size) * glb_next_safety_order_price

        //now we can calculate next values
        glb_current_deal_prev_position_size := strategy.position_size
        glb_next_safety_order_price         := next_so_price(count_placed_safety_orders, glb_base_order_price)
        glb_next_safety_order_qty           := next_so_qty(count_placed_safety_orders, glb_base_order_price)


        //place next SO as limit

        // ----------------------------
        // I guess there is no reason to send human readeable alerts to the bot, so this section
        // is refactored. Feel free to re-use this if your are interested in sending notifications at
        // the same time the strategy order triggers (otherwise notifications are delayed until the next candle)
        // ----------------------------

        // _alert = "D"+tostring(stats_deals_started)+"-SO"+tostring(count_placed_safety_orders)+" ("+
        //  tostring(syminfo.basecurrency)+"_"+tostring(syminfo.currency)+
        //   (cfg_strategy_type=="long"?" LONG":" SHORT") + ") | "+
        //   tostring(glb_next_safety_order_qty*glb_next_safety_order_price)+" "+tostring(syminfo.currency)
        // strategy.entry(id="D"+tostring(stats_deals_started)+"-SO" + tostring(count_placed_safety_orders),
        //   long=IS_LONG, qty=glb_next_safety_order_qty, limit=glb_next_safety_order_price, alert_message=_alert)

        strategy.entry(id="D"+tostring(stats_deals_started)+"-SO" + tostring(count_placed_safety_orders),
          long=IS_LONG, qty=glb_next_safety_order_qty, limit=glb_next_safety_order_price)


        //mark that a safety order was placed
        last_performed_action := 2

    //if we executed the max safety order, we will not place another, but update stats
    else if (strategy.opentrades > count_placed_safety_orders) and (last_performed_action == 2)
       and (count_placed_safety_orders == cfg_max_safety_orders)
          and (count_executed_safety_orders < count_placed_safety_orders)

        //delayed alert about previous SO execution
        _alert_human = "D"+tostring(stats_deals_started)+"-SO"+tostring(count_placed_safety_orders)+" [delayed] ("+
         tostring(syminfo.basecurrency)+"_"+tostring(syminfo.currency)+
          (cfg_strategy_type=="long"?" LONG":" SHORT") + ") | "+
           tostring(glb_next_safety_order_qty*glb_next_safety_order_price)+" "+tostring(syminfo.currency)
        alert(_alert_human, alert.freq_once_per_bar_close)

        count_executed_safety_orders        := count_executed_safety_orders + 1
        glb_total_volume                    += (strategy.position_size - glb_current_deal_prev_position_size)
                                                 * glb_next_safety_order_price
        glb_current_deal_prev_position_size := strategy.position_size
        glb_next_safety_order_price         := na


if valid_stop_loss()
    if cfg_enable_bot_control and cfg_exec_stop_loss
        _alert_json = get_bot_stopdeal_json()
        strategy.exit(id="D"+tostring(stats_deals_started)+"-SL",
          stop=glb_stop_loss_price, when=is_deal_started(), alert_message=_alert_json)
    else
        // ----------------------------
        // I guess there is no reason to send human readeable alerts to the bot, so this section
        // is refactored. Feel free to re-use this if your are interested in sending notifications at
        // the same time the strategy order triggers (otherwise notifications are delayed until the next candle)
        // ----------------------------

        // _alert_human = "D"+tostring(stats_deals_started)+"-SL ("+
        //  tostring(syminfo.basecurrency)+"_"+tostring(syminfo.currency)+
        //   (cfg_strategy_type=="long"?" LONG":" SHORT")+") "
        // strategy.exit(id="D"+tostring(stats_deals_started)+"-SL",
        //   stop=glb_stop_loss_price, when=is_deal_started(), alert_message=_alert_human)

        strategy.exit(id="D"+tostring(stats_deals_started)+"-SL",
          stop=glb_stop_loss_price, when=is_deal_started())


if cfg_enable_bot_control and cfg_exec_take_profit
    _alert_json = get_bot_stopdeal_json()
    strategy.order(id="D"+tostring(stats_deals_started)+"-TP", limit=glb_take_profit_price,
     long=(IS_LONG?false:true), qty=abs(strategy.position_size), when=is_deal_started(), alert_message=_alert_json)
else
    // ----------------------------
    // I guess there is no reason to send human readeable alerts to the bot, so this section
    // is refactored. Feel free to re-use this if your are interested in sending notifications at
    // the same time the strategy order triggers (otherwise notifications are delayed until the next candle)
    // ----------------------------

    // _alert_human = "D"+tostring(stats_deals_started)+"-TP ("+
    //  tostring(syminfo.basecurrency)+"_"+tostring(syminfo.currency)+
    //   (cfg_strategy_type=="long"?" LONG":" SHORT")+") "
    // strategy.order(id="D"+tostring(stats_deals_started)+"-TP", limit=glb_take_profit_price,
    //  long=(IS_LONG?false:true), qty=abs(strategy.position_size), when=is_deal_started(), alert_message=_alert_human)

    strategy.order(id="D"+tostring(stats_deals_started)+"-TP", limit=glb_take_profit_price,
     long=(IS_LONG?false:true), qty=abs(strategy.position_size), when=is_deal_started())


if is_planb_timeout() and cfg_planb_action == "close deal"
    //cancel take profit order
    strategy.cancel(id="D"+tostring(stats_deals_started)+"-TP")
    if cfg_enable_bot_control and cfg_exec_planb_timeout
        _alert_json = get_bot_stopdeal_json()
        strategy.order(id="D"+tostring(stats_deals_started)+"-TIMEOUT", limit=glb_planb_timeout_price,
         long=(IS_LONG?false:true), qty=abs(strategy.position_size), when=is_deal_started(), alert_message=_alert_json)
    else
        // ----------------------------
        // I guess there is no reason to send human readeable alerts to the bot, so this section
        // is refactored. Feel free to re-use this if your are interested in sending notifications at
        // the same time the strategy order triggers
        // ----------------------------

        // _alert_human = "D"+tostring(stats_deals_started)+"-TIMEOUT ("+
        //  tostring(syminfo.basecurrency)+"_"+tostring(syminfo.currency)+
        //   (cfg_strategy_type=="long"?" LONG":" SHORT")+") "
        // strategy.order(id="D"+tostring(stats_deals_started)+"-TIMEOUT", limit=glb_planb_timeout_price,
        //  long=(IS_LONG?false:true), qty=abs(strategy.position_size), when=is_deal_started(), alert_message=_alert_human)

        strategy.order(id="D"+tostring(stats_deals_started)+"-TIMEOUT", limit=glb_planb_timeout_price,
          long=(IS_LONG?false:true), qty=abs(strategy.position_size), when=is_deal_started())


//if we exited on this candle (either TP or SL), we want to cancel remaining orders from this trade
condition_take_profit           = is_condition_take_profit()
condition_stop_loss             = is_condition_stop_loss()
condition_planb_timeout         = is_condition_planb_price() and is_planb_timeout() and cfg_planb_action == "close deal"
condition_to_cancel_open_orders = condition_take_profit or condition_stop_loss or condition_planb_timeout


//reset variables for next trade and push stats
if condition_to_cancel_open_orders

    //common stats for all cases
    _current_days_in_deal = get_days(glb_dealstart_bar_time, time)
    array.push(statsarray_no_of_bars, bar_index - glb_dealstart_bar_index)
    array.push(statsarray_no_of_days, _current_days_in_deal)

    stats_deals_finished        := stats_deals_finished + 1

    if stats_max_days_in_deal <= _current_days_in_deal
        stats_max_days_in_deal              := _current_days_in_deal
        //approx
        stats_max_days_in_deal_start_time   := glb_dealstart_bar_time
        stats_max_days_in_deal_close_time   := time


    //extracting PNL
    glb_current_deal_pnl        := strategy.netprofit - glb_strategy_prev_netprofit
    glb_strategy_prev_netprofit := strategy.netprofit


    //statistics specific to each exit case
    if condition_stop_loss
        stats_deals_stop_loss_finished  := stats_deals_stop_loss_finished + 1

        glb_current_deal_close_value    := glb_current_deal_position_size * glb_stop_loss_price
        glb_total_volume                += glb_current_deal_close_value

        array.push(statsarray_losing_deals_pnl, glb_current_deal_pnl)

        if cfg_show_pnl_labels
            label.new(bar_index, glb_stop_loss_price,
              text=tostring(round(glb_current_deal_pnl, cfg_decimals))+
              "  "+tostring(syminfo.currency)+"\n"+get_timespan_string(glb_dealstart_bar_time, time),
               yloc=yloc.price, size=size.normal, style=label.style_labeldown, textcolor=color.black, color=get_bg_color_red())

        //delayed alert about deal close by stop loss
        _alert_human = "D"+tostring(stats_deals_started)+"-SL [delayed] ("+
         tostring(syminfo.basecurrency)+"_"+tostring(syminfo.currency)+
          (cfg_strategy_type=="long"?" LONG":" SHORT")+") | "+tostring(round(glb_current_deal_pnl, cfg_decimals))+" "
           +tostring(syminfo.currency)+" | "+get_timespan_string(glb_dealstart_bar_time, time)
        alert(_alert_human, alert.freq_once_per_bar_close)


    else if condition_planb_timeout
        stats_deals_timeout_finished    := stats_deals_timeout_finished + 1

        //executes on open price
        glb_current_deal_close_value    := glb_current_deal_position_size * open
        glb_total_volume                += glb_current_deal_close_value

        array.push(statsarray_timeout_deals_pnl, glb_current_deal_pnl)

        if glb_current_deal_pnl >= 0
            array.push(statsarray_winning_deals_pnl, glb_current_deal_pnl)
        else
            array.push(statsarray_losing_deals_pnl, glb_current_deal_pnl)

        //increase SO array as well but also a separate that holds timeout deals count
        array.set(statsarray_safety_orders, count_executed_safety_orders, array.get(statsarray_safety_orders, count_executed_safety_orders)+1)
        array.set(statsarray_safety_orders_timeout, count_executed_safety_orders, array.get(statsarray_safety_orders_timeout, count_executed_safety_orders)+1)

        if cfg_show_pnl_labels
            label.new(bar_index, glb_planb_timeout_price,
              text=""+tostring(round(glb_current_deal_pnl, cfg_decimals))+
              "  "+tostring(syminfo.currency)+"\n"+get_timespan_string(glb_dealstart_bar_time, time),
               yloc=yloc.price, size=size.normal, style=label.style_labeldown, textcolor=color.black, color=get_bg_color_lightblue())

        //delayed alert about deal close by timeout
        _alert_human = "D"+tostring(stats_deals_started)+"-TIMEOUT [delayed] ("+
         tostring(syminfo.basecurrency)+"_"+tostring(syminfo.currency)+
          (cfg_strategy_type=="long"?" LONG":" SHORT")+") | "+tostring(round(glb_current_deal_pnl, cfg_decimals))+" "
           +tostring(syminfo.currency)+" | "+get_timespan_string(glb_dealstart_bar_time, time)
        alert(_alert_human, alert.freq_once_per_bar_close)

    else if condition_take_profit
        //we consider that deal closed with any SO, if not closed with SL
        array.set(statsarray_safety_orders, count_executed_safety_orders, array.get(statsarray_safety_orders, count_executed_safety_orders)+1)
        stats_deals_take_profit_finished    := stats_deals_take_profit_finished + 1

        glb_current_deal_close_value        := glb_current_deal_position_size * glb_take_profit_price
        glb_total_volume                    += glb_current_deal_close_value

        array.push(statsarray_winning_deals_pnl, glb_current_deal_pnl)

        if cfg_show_pnl_labels
            label.new(bar_index, glb_take_profit_price,
              text=""+tostring(round(glb_current_deal_pnl, cfg_decimals))+
              "  "+tostring(syminfo.currency)+"\n"+get_timespan_string(glb_dealstart_bar_time, time),
                 yloc=yloc.price, size=size.normal, style=label.style_labelup, textcolor=color.black, color=get_bg_color_green())

        //delayed alert about deal close by take profit
        _alert_human = "D"+tostring(stats_deals_started)+"-TP [delayed] ("+
         tostring(syminfo.basecurrency)+"_"+tostring(syminfo.currency)+
          (cfg_strategy_type=="long"?" LONG":" SHORT")+") | "+tostring(round(glb_current_deal_pnl, cfg_decimals))+" "
           +tostring(syminfo.currency)+" | "+get_timespan_string(glb_dealstart_bar_time, time)
        alert(_alert_human, alert.freq_once_per_bar_close)


    strategy.cancel_all(when=condition_to_cancel_open_orders)

    //RESET GLOBALS AFTER DEAL COMPLETION
    lastdeal_close_bar_index    := bar_index
    //approximate
    lastdeal_close_time         := time

    glb_take_profit_price                   := na
    glb_planb_timeout_price                 := na
    glb_stop_loss_price                     := na
    glb_base_order_price                    := na
    glb_base_order_qty                      := na
    glb_next_safety_order_price             := na
    glb_next_safety_order_qty               := na
    glb_current_deal_position_size          := na
    glb_current_deal_prev_position_size     := na
    glb_current_deal_avg_price              := na
    glb_current_deal_close_value            := na
    glb_current_deal_pnl                    := 0

    glb_dealstart_bar_index     := na
    glb_dealstart_bar_time      := na

    last_performed_action       := 0
    count_placed_safety_orders  := 0
    count_executed_safety_orders:= 0



_color_avg_price        = theme_text_color
_color_take_profit      = color.green
if is_planb_timeout() and cfg_planb_action != "none"
    _color_avg_price        := get_bg_color_lightblue()

if is_planb_timeout() and cfg_planb_action == "close deal"
    _color_take_profit      := color.new(color.green, 100)


p1      = plot(glb_take_profit_price, color=_color_take_profit, style=plot.style_circles, title="Take Profit")
p2      = plot(strategy.position_avg_price, color=theme_text_color, style=plot.style_circles, title="Deal avg price")
p3      = plot(glb_next_safety_order_price, color=color.orange, style=plot.style_circles, title="Safety order")
p4      = plot(glb_stop_loss_price, color=color.red, style=plot.style_circles, title="Stop loss")
p5      = plot(glb_planb_timeout_price, color=get_bg_color_lightblue(), style=plot.style_circles, title="PLAN-B")


fill(p1, p2, color=_color_take_profit, title="Fill take profit")
fill(p2, p3, color=color.orange, title="Fill safety order")
fill(p3, p4, color=color.red, title="Fill stop loss")
_col = (cfg_max_safety_orders == 0 ? color.new(color.red, 90) : color.new(color.red, 100))
fill(p2, p4, color=_col, title="Fill stop loss")
fill(p2, p5, color=get_bg_color_lightblue(), title="Fill PLAN-B")


//TABLES
if barstate.islastconfirmedhistory
    glb_required_capital := get_required_capital()

    //if we are still in a deal, update some stats to current bar
    _deal_in_progress = stats_deals_finished < stats_deals_started
    if _deal_in_progress
        lastdeal_close_bar_index    := bar_index
        //approximate
        lastdeal_close_time         := time
        array.push(statsarray_no_of_bars, bar_index - glb_dealstart_bar_index)
        array.push(statsarray_no_of_days, get_days(glb_dealstart_bar_time, time_close))
        if stats_max_days_in_deal <= get_days(glb_dealstart_bar_time, time_close)
            stats_max_days_in_deal              := get_days(glb_dealstart_bar_time, time_close)
            stats_max_days_in_deal_start_time   := glb_dealstart_bar_time
            stats_max_days_in_deal_close_time   := time_close


    //----------------------------------------------------------------
    //data validation and a table with warnings
    string _text_warnings = ""

    if stats_deals_started == 0
        _text_warnings += " - No deal started\n"

    if stats_deals_finished == 0
        _text_warnings += " - No deal finished\n"

    if (cfg_enable_stop_loss and (valid_stop_loss() == false))
        _text_warnings += " - Stop loss is less than last safety order (should be more than " +
          tostring(round(stepped_deviation(cfg_max_safety_orders), 2)) + "%"+")\n"

    if stepped_deviation(cfg_max_safety_orders) > 100
        _text_warnings += " - Covered deviation via safety orders is over 100%\n"

    if _text_warnings != ""
        table warnings = table.new(position.bottom_center, columns=1, rows=2,
              frame_width=1, frame_color=color.red, border_width=1, border_color=color.red, bgcolor=color.red)
        table.cell(warnings, 0, 0, "WARNINGS!\n(Fix them, otherwise the stats are innacurate)",
          text_color=color.white, text_halign=text.align_center)
        table.cell(warnings, 0, 1, _text_warnings,
          text_color=color.white, text_halign=text.align_left)
    //----------------------------------------------------------------


    //----------------------------------------------------------------
    //a table with buying steps, volumes, prices similar to 3commas
    //set custom values for bo entry price

    if cfg_show_step_table
        _steps_bo_size      = cfg_base_order_size_usd / cfg_steps_bo_price

        table steps_amount = table.new(position.bottom_left, columns=8, rows=int(cfg_max_safety_orders)+4,
          frame_width=1, frame_color=color.black, border_width=1, border_color=color.black, bgcolor=color.green)
        table.cell(steps_amount, 0, 0, "Order\nno", text_color=color.white, text_size=size.small)
        table.cell(steps_amount, 1, 0, "Deviation\n( % )", text_color=color.white, text_size=size.small)
        table.cell(steps_amount, 2, 0, "Size\n( " + tostring(syminfo.basecurrency)+" )", text_color=color.white, text_size=size.small)
        table.cell(steps_amount, 3, 0, "Volume\n( " + tostring(syminfo.currency)+" )", text_color=color.white, text_size=size.small)
        table.cell(steps_amount, 4, 0, "Price\n( " + tostring(syminfo.currency)+" )", text_color=color.white, text_size=size.small)
        table.cell(steps_amount, 5, 0, "Avg price\n( " + tostring(syminfo.currency)+" )", text_color=color.white, text_size=size.small)
        table.cell(steps_amount, 6, 0, "Total size\n( " + tostring(syminfo.basecurrency)+" )", text_color=color.white, text_size=size.small)
        table.cell(steps_amount, 7, 0, "Total Vol\n( " + tostring(syminfo.currency)+" )", text_color=color.white, text_size=size.small)

        float _steps_total_size                 = _steps_bo_size
        float _steps_total_volume               = cfg_steps_bo_price * _steps_bo_size

        //base order
        table.cell(steps_amount, 0, 1, "BO", text_color=color.white, text_size=size.small)
        table.cell(steps_amount, 1, 1, "0", text_color=color.white, text_size=size.small)
        table.cell(steps_amount, 2, 1, tostring(_steps_bo_size), text_color=color.white, text_size=size.small)
        table.cell(steps_amount, 3, 1, tostring(cfg_steps_bo_price * _steps_bo_size), text_color=color.white, text_size=size.small)
        table.cell(steps_amount, 4, 1, tostring(cfg_steps_bo_price), text_color=color.white, text_size=size.small)
        table.cell(steps_amount, 5, 1, tostring(_steps_total_volume / _steps_total_size), text_color=color.white, text_size=size.small)
        table.cell(steps_amount, 6, 1, tostring(_steps_total_size), text_color=color.white, text_size=size.small)
        table.cell(steps_amount, 7, 1, tostring(_steps_total_volume), text_color=color.white, text_size=size.small)

        float _steps_next_safety_order_price    = 0
        float _steps_next_safety_order_qty      = 0

        if cfg_max_safety_orders > 0
            for _i=1 to cfg_max_safety_orders
                _steps_next_safety_order_price   := next_so_price(_i, cfg_steps_bo_price)
                _steps_next_safety_order_qty     := next_so_qty(_i, cfg_steps_bo_price)

                _steps_total_size                += _steps_next_safety_order_qty
                _steps_total_volume              += _steps_next_safety_order_qty * _steps_next_safety_order_price

                table.cell(steps_amount, 0, (_i+2), tostring(_i), text_color=color.white, text_size=size.small)
                table.cell(steps_amount, 1, (_i+2), tostring(stepped_deviation(_i)), text_color=color.white, text_size=size.small)
                table.cell(steps_amount, 2, (_i+2), tostring(_steps_next_safety_order_qty), text_color=color.white, text_size=size.small)
                table.cell(steps_amount, 3, (_i+2), tostring(_steps_next_safety_order_qty * _steps_next_safety_order_price),
                  text_color=color.white, text_size=size.small)
                table.cell(steps_amount, 4, (_i+2), tostring(_steps_next_safety_order_price), text_color=color.white, text_size=size.small)
                table.cell(steps_amount, 5, (_i+2), tostring(_steps_total_volume / _steps_total_size), text_color=color.white, text_size=size.small)
                table.cell(steps_amount, 6, (_i+2), tostring(_steps_total_size), text_color=color.white, text_size=size.small)
                table.cell(steps_amount, 7, (_i+2), tostring(_steps_total_volume), text_color=color.white, text_size=size.small)
    //----------------------------------------------------------------




    //----------------------------------------------------------------
    //a table with all kind of statistics about strategy results
    if cfg_show_stats_table
        int rowsforstats = array.size(statsarray_safety_orders) + 25
        table sostats = table.new(position.top_right, columns=2, rows=rowsforstats,
              frame_width=1, frame_color=color.black)

        _row = 0
        table.cell(sostats, column=0, row=_row,
          text="Zendog DCA Backtester " + tostring(syminfo.basecurrency) + " / " + tostring(syminfo.currency),
           text_halign=text.align_left, text_size=size.small, text_color=color.white, bgcolor=get_bg_color_blue())
        table.cell(sostats, column=1, row=_row, text="", text_size=size.small, text_color=color.white, bgcolor=get_bg_color_blue())
        _row += 1

        table.cell(sostats, column=0, row=_row, text="Status:",
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        if _deal_in_progress
            table.cell(sostats, column=1, row=_row, text="Deal in progress",
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_red())
        else if stats_deals_started == 0 and stats_deals_finished == 0
            table.cell(sostats, column=1, row=_row, text="No deals",
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_red())
        else
            table.cell(sostats, column=1, row=_row, text="All deals closed",
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_green())
        _row += 1


        table.cell(sostats, column=0, row=_row, text="Open deals:", text_halign=text.align_left,
           text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        if stats_deals_started - stats_deals_finished == 0
            table.cell(sostats, column=1, row=_row, text="0",
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_green())
        else
            _current_deal_total_value       = strategy.position_size * strategy.position_avg_price
            _current_deal_actual_value      = strategy.position_size * close
            float _current_deal_equity_percent    = 0
            if IS_LONG
                _current_deal_equity_percent    := (_current_deal_actual_value * 100 / _current_deal_total_value) - 100
            else
                _current_deal_equity_percent    := 100 - (_current_deal_actual_value * 100 / _current_deal_total_value)

            _text0 = tostring(stats_deals_started - stats_deals_finished) + " deal\n"
            _text0 := _text0 + tostring(round(strategy.openprofit, cfg_decimals)) + " " + tostring(syminfo.currency)
            _text0 := _text0 + " (" + tostring(round(_current_deal_equity_percent, 2)) + "%)\n"
            _text0 := _text0 + tostring(get_timespan_string(glb_dealstart_bar_time, time_close)) +
              ", currently at SO " + tostring(count_placed_safety_orders) + "\n"
            _text0 := _text0 + "(start: " + tostring(time_to_date_string(glb_dealstart_bar_time)) + ")"
            table.cell(sostats, column=1, row=_row, text=_text0,
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_red())
        _row += 1

        table.cell(sostats, column=0, row=_row, text="Finished deals:",
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        table.cell(sostats, column=1, row=_row, text=tostring(stats_deals_finished),
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _row += 1


        table.cell(sostats, column=0, row=_row, text="Winning deals:",
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        if stats_deals_take_profit_finished == 0
            table.cell(sostats, column=1, row=_row, text=tostring(array.size(statsarray_winning_deals_pnl)),
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        else
            _text5 = ""
            _text5 := _text5 + tostring(stats_deals_take_profit_finished)
            _text5 := _text5 + " (" + tostring(round(array.avg(statsarray_winning_deals_pnl), cfg_decimals))
            _text5 := _text5 + " " + tostring(syminfo.currency) + " on avg)"

            table.cell(sostats, column=1, row=_row, text=_text5,
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_green())
        _row += 1


        table.cell(sostats, column=0, row=_row, text="Losing deals:",
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        if array.size(statsarray_losing_deals_pnl) == 0
            table.cell(sostats, column=1, row=_row, text=tostring(array.size(statsarray_losing_deals_pnl)),
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_green())
        else
            _text6 = ""
            _text6 := _text6 + tostring(array.size(statsarray_losing_deals_pnl))
            _text6 := _text6 + " (" + tostring(round(array.avg(statsarray_losing_deals_pnl), cfg_decimals))
            _text6 := _text6 + " " + tostring(syminfo.currency) + " on avg)"

            table.cell(sostats, column=1, row=_row, text=_text6,
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_red())
        _row += 1



        table.cell(sostats, column=0, row=_row, text="Timeout deals:",
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        if stats_deals_timeout_finished == 0
            table.cell(sostats, column=1, row=_row, text=tostring(stats_deals_timeout_finished),
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_green())
        else
            _text6 = ""
            _text6 := _text6 + tostring(stats_deals_timeout_finished)
            _text6 := _text6 + " (" + tostring(round(array.avg(statsarray_timeout_deals_pnl), cfg_decimals))
            _text6 := _text6 + " " + tostring(syminfo.currency) + " on avg)"

            table.cell(sostats, column=1, row=_row, text=_text6,
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_lightblue())
        _row += 1



        table.cell(sostats, column=0, row=_row,
           text="Total time  ( Max  |  Avg time in deal ):",
             text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _text4 = "" + tostring(get_timespan_string(bh_start_time, bh_end_time)) + "    ( "
        _text4 := _text4 + "" + get_timestring_from_days(array.max(statsarray_no_of_days)) + "  |  "
        _text4 := _text4 + "" + get_timestring_from_days(array.avg(statsarray_no_of_days)) + " )"
        table.cell(sostats, column=1, row=_row, text=_text4,
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _row += 1


        table.cell(sostats, column=0, row=_row,
           text="Total backtest:\n" + tostring(time_to_date_string(bh_start_time)) + "\n" + tostring(time_to_date_string(bh_end_time)),
             text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        table.cell(sostats, column=1, row=_row,
          text="Max days in deal:\n" + tostring(time_to_date_string(stats_max_days_in_deal_start_time)) + "\n" +
           tostring(time_to_date_string(stats_max_days_in_deal_close_time)),
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _row += 1


        table.cell(sostats, column=0, row=_row, text="Required capital:",
           text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        table.cell(sostats, column=1, row=_row, text=tostring(glb_required_capital) + " "+tostring(syminfo.currency),
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _row += 1

        table.cell(sostats, column=0, row=_row, text="Profit:\n(after commision)",
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))

        _text1 = tostring(round(get_final_pnl_new(), cfg_decimals)) + " " + tostring(syminfo.currency)
        _text1 := _text1 + " (" + tostring(round(get_final_pnl_prct_new(), 2)) + " %)\n"
        if get_days(bh_start_time, bh_end_time) >= 1
            _text1 := _text1 + tostring(round(get_final_pnl_prct_new() / get_days(bh_start_time, bh_end_time), 2)) + "% / day"
        else
            _text1 := _text1 + tostring(round(get_final_pnl_prct_new(), 2)) + "% / day"
        table.cell(sostats, column=1, row=_row, text=_text1,
           text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _row += 1


        //if date range is limited calculate between start and end date
        _bh_equity      = ((glb_required_capital / bh_start_price) * bh_end_price) - glb_required_capital
        _bh_commision   = get_commission_for_volume(glb_required_capital + ((glb_required_capital / bh_start_price) * bh_end_price))
        _bh_equity      := _bh_equity - _bh_commision
        _bh_prct_total  = round(_bh_equity * 100 / glb_required_capital, 2)

        table.cell(sostats, column=0, row=_row, text="Buy & hold return:\n(after commision)",
           text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _text2 = tostring(round(_bh_equity, cfg_decimals)) + " " + tostring(syminfo.currency)
        _text2 := _text2 + " (" + tostring(_bh_prct_total) + "%)\n"
        if get_days(bh_start_time, bh_end_time) >= 1
            _text2 := _text2 + tostring(round(_bh_prct_total / get_days(bh_start_time, bh_end_time), 2)) + "% / day"
        else
            _text2 := _text2 + tostring(round(_bh_prct_total, 2)) + "% / day"
        table.cell(sostats, column=1, row=_row, text=_text2,
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _row += 1


        table.cell(sostats, column=0, row=_row, text="Covered deviation:",
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        table.cell(sostats, column=1, row=_row, text=tostring(round(stepped_deviation(cfg_max_safety_orders), 2)) + "%",
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _row += 1


        string _bef = valid_stop_loss() ? "before SL" : ""
        table.cell(sostats, column=0, row=_row, text="Max deviation:\n(Deal start price vs worst candle "+_bef+")",
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        table.cell(sostats, column=1, row=_row, text=tostring(round(stats_biggest_dev, 2)) + "%\n" +
          "(" + time_to_date_string(stats_biggest_dev_time) + ")",
             text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _row += 1


        table.cell(sostats, column=0, row=_row, text="Max drawdown from breakeven:\n(Avg price vs worst candle "+_bef+")",
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        table.cell(sostats, column=1, row=_row, text=tostring(round(stats_max_drawdown, cfg_decimals))  + " " + tostring(syminfo.currency) +
              " (" + tostring(round(stats_max_drawdown_equity_percent, 2)) + "%)\n" +
             "(" + time_to_date_string(stats_max_drawdown_time) + ")",
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _row += 1



        table.cell(sostats, column=0, row=_row, text="Max # bars in deal:",
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        table.cell(sostats, column=1, row=_row, text=tostring(array.max(statsarray_no_of_bars)),
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _row += 1


        table.cell(sostats, column=0, row=_row, text="Avg # bars in deal:",
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        table.cell(sostats, column=1, row=_row, text=tostring(round(array.avg(statsarray_no_of_bars), 2)),
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _row += 1


        table.cell(sostats, column=0, row=_row, text="Total volume:",
           text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        table.cell(sostats, column=1, row=_row, text=tostring(round(glb_total_volume, cfg_decimals)) + " "+tostring(syminfo.currency),
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _row += 1

        table.cell(sostats, column=0, row=_row, text="Commision:",
           text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        table.cell(sostats, column=1, row=_row, text=tostring(round(get_commission_for_volume(glb_total_volume), cfg_decimals)) + " "+
         tostring(syminfo.currency),
          text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
        _row += 1


        if array.size(statsarray_safety_orders) > 0
            table.cell(sostats, column=0, row=_row, text="Close stats for "+tostring(stats_deals_finished)+" deals",
              text_color=color.white, text_size=size.small, bgcolor=get_bg_color_blue(), text_halign=text.align_left)
            table.cell(sostats, column=1, row=_row, text="Number (%) / Exit with timeout", text_color=color.white, text_size=size.small, bgcolor=get_bg_color_blue())
            _row += 1
            _saved_row = _row
            _row += 2

            _max_safety_orders = 0
            float _avg_safety_orders = 0
            for _i = 0 to array.size(statsarray_safety_orders)-1
                string _closed_text = ""
                if _i == 0
                    _closed_text := "BO    (" + tostring(round(stepped_deviation(_i), 2)) + "%)"
                else
                    _closed_text := "SO " + tostring(_i) + " (" + tostring(round(stepped_deviation(_i), 2)) + "%)"

                _cnt = array.get(statsarray_safety_orders, _i)
                if _cnt > 0 and _i > _max_safety_orders
                    _max_safety_orders := _i

                _avg_safety_orders += _cnt * _i
                table.cell(sostats, column=0, row=(_row + _i), text="Closed with " + _closed_text, text_halign=text.align_left,
                  text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row+_i))
                table.cell(sostats, column=1, row=(_row + _i),
                  text=tostring(_cnt) + " (" + tostring(round(_cnt*100/stats_deals_finished, 2)) + "%) / " + tostring(array.get(statsarray_safety_orders_timeout, _i)),
                   text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row+_i))

            _avg_safety_orders := round(_avg_safety_orders / array.sum(statsarray_safety_orders), 1)

            table.cell(sostats, column=0, row=_saved_row, text="Max SO used:", text_halign=text.align_left,
              text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_saved_row))
            table.cell(sostats, column=1, row=_saved_row, text=tostring(_max_safety_orders),
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_saved_row))

            table.cell(sostats, column=0, row=_saved_row+1, text="Avg SO used:", text_halign=text.align_left,
              text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_saved_row+1))
            table.cell(sostats, column=1, row=_saved_row+1, text=tostring(_avg_safety_orders),
              text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_saved_row+1))

        if valid_stop_loss()
            _row += array.size(statsarray_safety_orders)
            table.cell(sostats, column=0, row=_row, text="Closed with Stop Loss ("+tostring(cfg_stop_loss_perc)+"%)", text_halign=text.align_left,
              text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))
            table.cell(sostats, column=1, row=_row,
               text=tostring(stats_deals_stop_loss_finished) + " (" + tostring(round(stats_deals_stop_loss_finished*100/stats_deals_finished, 2)) + "%)",
                 text_halign=text.align_left, text_color=color.black, text_size=size.small,
                  bgcolor=(stats_deals_stop_loss_finished > 0 ? get_bg_color_red() : get_bg_color_green()))
    //----------------------------------------------------------------



    //----------------------------------------------------------------
    if cfg_show_settings_table
        table settings = table.new(position.bottom_left, columns=1, rows=2,
              frame_width=1, frame_color=color.black)
        _row = 0
        table.cell(settings, column=0, row=0,
          text="DCA Settings",
           text_halign=text.align_left, text_size=size.small, text_color=color.white, bgcolor=get_bg_color_blue())

        _text  = "Type: "+tostring(cfg_strategy_type)+"; "
        _text += "Commision: "+tostring(cfg_commision_percent)+"%;\n"
        _text += "Condition: "+tostring(deal_start_type)+" "
        if deal_start_type == "RSI-7"
            _text += tostring(rsi_start_operation)
            _text += " "+tostring(rsi_start_value)+" \n\n"
        else if deal_start_type == "External Indicator"
            _text += "( "
            _text += tostring(deal_start_operation)+" "
            _text += tostring(deal_start_value)
            _text += " )\n\n"

        _text += "TP: "+tostring(cfg_take_profit_perc)+"% "
        _text += " ("+tostring(cfg_take_profit_type)+")"
        if cfg_enable_stop_loss
            _text += "\nSL: "+tostring(cfg_stop_loss_perc)+"%"
        _text += "\n\n"

        _text += "BO: "+tostring(cfg_base_order_size_usd)+" "+tostring(syminfo.currency)+"; "
        _text += "SO: "+tostring(cfg_safety_order_size_usd)+" "+tostring(syminfo.currency)+";\n"
        _text += "SO Volume Scale: "+tostring(cfg_safety_order_volume_scale)+"; "
        _text += "SO Step Scale: "+tostring(cfg_safety_order_price_step_scale)+";\n"
        _text += "SO Dev: "+tostring(cfg_safety_order_price_deviation_perc)+"% ; "
        _text += "Max SO: "+tostring(cfg_max_safety_orders)+"; "
        _text += "Covered: "+tostring(round(stepped_deviation(cfg_max_safety_orders), 2))+" %;\n"

        table.cell(settings, column=0, row=1,
          text=_text, text_halign=text.align_left, text_color=color.black, text_size=size.small, bgcolor=get_bg_color_grey(_row))



    // lab = ""

    // if array.size(statsarray_losing_deals_pnl) > 0
    //     lab := lab + "Losing deals:\n"
    //     for i = 0 to array.size(statsarray_losing_deals_pnl) - 1
    //         lab := lab + tostring(array.get(statsarray_losing_deals_pnl, i)) + "\n"

    // if array.size(statsarray_winning_deals_pnl) > 0
    //     lab := lab + "Winning deals:\n"
    //     for i = 0 to array.size(statsarray_winning_deals_pnl) - 1
    //         lab := lab + tostring(array.get(statsarray_winning_deals_pnl, i)) + "\n"

    // f_print(lab)
    //----------------------------------------------------------------